import os
from flask import Flask, render_template, request, redirect, url_for, session

# Initialize the Flask application
app = Flask(__name__)
# Flask's secret key for session management.
# In a production environment, generate a strong, random key and store it securely
# (e.g., using environment variables).
app.secret_key = os.urandom(24)

# --- Placeholder for Telegram API Configuration ---
# In a real application, you would load these from environment variables
# For example:
# TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
# TELEGRAM_BOT_USERNAME = "@YourBotUsername" # Replace with your actual bot username

# This list will simulate storing pending registrations.
# In a real application, you would use a database (e.g., SQLite, PostgreSQL, Firestore).
# Structure: {phone_number: {"status": "pending", "code": "ABCDEF"}}
pending_registrations = {}

@app.route('/')
def index():
    """
    Renders the homepage.
    """
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    """
    Handles the registration form.
    On GET: Displays the registration form.
    On POST: Processes the submitted phone number.
    """
    error = None
    if request.method == 'POST':
        phone_number = request.form.get('phone_number')

        if not phone_number:
            error = "Phone number is required."
        elif not phone_number.startswith('+') or not phone_number[1:].isdigit():
            # Basic validation: starts with '+' and rest are digits
            error = "Invalid phone number format. Please include country code (e.g., +1234567890)."
        else:
            # In a real scenario, you'd store this in a database
            # and potentially trigger a message to your Telegram bot
            # to prepare for sending a code.
            # For this example, we'll store it in a session and a mock dictionary.
            session['phone_number'] = phone_number
            # Simulate a pending registration for this phone number
            # In a real app, a unique code would be generated by your BOT and sent to Telegram.
            # This is just for demonstration purposes.
            mock_code = "123456" # This code will be displayed conceptually.
                               # Real codes come from your Telegram bot.
            pending_registrations[phone_number] = {"status": "pending", "code": mock_code}

            print(f"Registration initiated for {phone_number}. Mock code: {mock_code}")
            return redirect(url_for('instructions'))

    return render_template('register.html', error=error)

@app.route('/instructions')
def instructions():
    """
    Renders the page that instructs the user to check their Telegram and enter the code.
    """
    phone_number = session.get('phone_number')
    if not phone_number:
        # Redirect if no phone number was submitted in the session
        return redirect(url_for('register'))

    # Retrieve the mock code for display. In a real scenario, this mock_code
    # would *not* be displayed on the website but would be sent to the user
    # via their Telegram app by your bot.
    mock_code = pending_registrations.get(phone_number, {}).get("code", "N/A")

    # The actual bot username would come from your configuration.
    bot_username = "@YourTelegramBot" # Replace with your actual bot's username

    return render_template('instructions.html',
                           phone_number=phone_number,
                           mock_code=mock_code, # For demo only; remove in production!
                           bot_username=bot_username)

@app.route('/verify_code', methods=['POST'])
def verify_code():
    """
    Handles the code verification.
    """
    user_provided_code = request.form.get('code')
    phone_number = session.get('phone_number')

    if not phone_number:
        return redirect(url_for('register'))

    # In a real application, you would query your database (or communicate with your bot)
    # to check if the provided code matches the one sent to this phone number via Telegram.
    # For this demo, we'll check against our mock_code stored in pending_registrations.

    stored_data = pending_registrations.get(phone_number)
    if stored_data and stored_data["code"] == user_provided_code and stored_data["status"] == "pending":
        # Registration successful
        stored_data["status"] = "completed"
        session.pop('phone_number', None) # Clear phone number from session
        print(f"Registration successful for {phone_number}")
        return render_template('success.html', phone_number=phone_number)
    else:
        print(f"Failed verification for {phone_number} with code {user_provided_code}")
        error = "Invalid or expired code. Please try again or re-initiate registration."
        # If verification fails, redirect back to instructions or a dedicated error page.
        return render_template('instructions.html',
                               phone_number=phone_number,
                               mock_code=pending_registrations.get(phone_number, {}).get("code", "N/A"),
                               bot_username="@YourTelegramBot",
                               error=error)

@app.route('/success')
def success():
    """
    Renders a success page after successful registration.
    """
    return render_template('success.html')

if __name__ == '__main__':
    # When running locally, Flask will pick up environment variables if set.
    # For a real deployment, ensure your hosting environment sets TELEGRAM_API_ID and TELEGRAM_API_HASH.
    app.run(debug=True)
